FUNCTION_BLOCK "LAcycCom_ReadDriveMessagesDateTime"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'tech.team.motioncontrol@siemens.com'
FAMILY : AcycCom
VERSION : 1.5
   VAR_INPUT 
      execute : Bool;
      alarms : Bool := TRUE;
      faults : Bool := TRUE;
      siMessages : Bool;
      driveObjectId { S7_HiddenAssignment := 'HideIfNoParamAssigned'} : Int := -1;
      hardwareId : HW_IO;
   END_VAR

   VAR_OUTPUT 
      done { ExternalWritable := 'False'} : Bool;
      busy { ExternalWritable := 'False'} : Bool;
      error { ExternalWritable := 'False'} : Bool;
      status { ExternalWritable := 'False'} : Word := #STATUS_NO_CALL;
      messages { ExternalWritable := 'False'} : "LAcycCom_typeDriveMessages";
      diagnostics { ExternalWritable := 'False'} : "LAcycCom_typeDriveDiagnostics";
   END_VAR

   VAR_IN_OUT 
      requestBuffer : "LAcycCom_typeRequestBuffer";
   END_VAR

   VAR 
      statBusy { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statDone { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statError { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statStatus { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statFBState { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : SInt;
      statAlarmsInput { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statFaultsInput { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statSIMessagesInput { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statDriveObjectId { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statHardwareId { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : HW_IO;
      statDTL {InstructionName := 'DTL'; LibVersion := '1.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DTL;
      statIndexNew { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : SInt;
      statOffset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : SInt;
      statWarningNoMessages { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statWarningRetriggering { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statFaultsComplete { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statAlarmsComplete { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statCurrentMessage { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : SInt;
      statGoneAlarms { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#ELEMENTS_COUNT_UPPER_LIM] of Bool;
      statDataset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Array[0..#PARAMETER_COUNT_READ_UPPER_LIM] of "LAcycCom_typeDriveDatasetDWord";
      statBuffer { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "LAcycCom_typeDriveMessages";
      instReadDriveParams { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : "LAcycCom_ReadDriveParams";
   END_VAR

   VAR_TEMP 
      tempLoopIndex : SInt;
      tempSort : SInt;
      tempUInt : UInt;
      tempDate : Date;
      tempTime : Time_Of_Day;
      tempRetVal : Int;
      tempDTL {InstructionName := 'DTL'; LibVersion := '1.0'} : DTL;
      tempGeoAddr {InstructionName := 'GEOADDR'; LibVersion := '1.0'} : GEOADDR;
      tempVoidDiagnostics : "LAcycCom_typeDriveDiagnostics";
      tempBuffer : "LAcycCom_typeDriveMessages";
   END_VAR

   VAR CONSTANT 
      FB_IDLE : SInt := 0;
      FB_ALARMS_DATASET : SInt := 1;
      FB_FAULTS_DATASET : SInt := 2;
      FB_SIMESSAGES_DATASET : SInt := 3;
      FB_ALARMS_GONE_DATASET : SInt := 4;
      FB_READ_STEP_1 : SInt := 5;
      FB_READ_STEP_2 : SInt := 6;
      FB_SORTING : SInt := 10;
      MAX_DRIVE_OBJECT_NO : Int := 254;
      STATUS_EXECUTION_FINISHED : Word := 16#0000;
      STATUS_FINISHED_NO_MSG_SELECTED : Word := 16#0001;
      STATUS_NO_CALL : Word := 16#7000;
      STATUS_FIRST_CALL : Word := 16#7001;
      STATUS_SUBSEQUENT_CALL : Word := 16#7002;
      WARN_EXECUTE_SET_DURING_PROCESSING : Word := 16#7101;
      ERR_AMBIGUOUS_FB_CALL : Word := 16#8006;
      ERR_INVALID_DRIVE_OBJECT_ID : Word := 16#8208;
      ERR_ARRAY_LIMITS : Word := 16#8400;
      ERR_UNDEFINED_STATE : Word := 16#8611;
      ERR_DO_ID : Word := 16#8618;
      ERR_HW_ID : Word := 16#8620;
      ERR_READ_DRIVE_PARAMS_ALARMS : Word := 16#8621;
      ERR_READ_DRIVE_PARAMS_FAULTS : Word := 16#8622;
      ERR_READ_DRIVE_PARAMS_SI_MESSAGES : Word := 16#8623;
      ERR_READ_DRIVE_PARAMS_ALARMS_GONE : Word := 16#8624;
      INT_ERR_WRREC : Word := 16#8603;
      INT_ERR_RDREC : Word := 16#8604;
      INT_ERR_NOT_CONFIG : Word := 16#8093;
      INT_ERR_NOT_KNOWN : Word := 16#80B0;
      INT_ERR_LOG_START_ADDR : Word := 16#8090;
      DO_NOT_EXIST : Word := 16#0019;
      OFFSET_INFO : SInt := 8;
      OFFSET_DAYS : SInt := 16;
      OFFSET_MS : SInt := 24;
      OFFSET_DATE : UDInt := 7305;
      PARAMETER_COUNT_READ_UPPER_LIM : Int := 31;
      ELEMENTS_COUNT_UPPER_LIM : Int := 7;
      EMPTY_ENTRY : DWord := 16#0000_0000;
      INIT_DATASET : Byte := 16#FF;
      MESSAGES_UPPER_LIM_LOCAL : Int := 23;
   END_VAR


BEGIN
	//=============================================================================
	// SIEMENS AG
	// (c)Copyright 2020 All Rights Reserved
	//-----------------------------------------------------------------------------
	// Library: LAcycCom
	// Tested with: S7-1513-1 PN
	// Engineering: TIA Portal V15
	// Restrictions: The drive must be in UTC mode
	// Requirements: S7-1200 / S7-1500
	//               FB LAcycCom_ResourceManager is required
	// Functionality: Read alarms, faults and SI messages from SINAMICS drive and output in structure (newest elements first)
	//-----------------------------------------------------------------------------
	// Change log table:
	// Version    Date          Expert in charge    Changes applied
	// 01.03.01   27.01.2016    AL                  first released version
	// 01.03.02   22.11.2017    AL                  added errorValue to "LAcycCom_typeDriveDiagnostics"
	// 01.05.00   31.10.2018    AL                  input 'driveObjectId' data type changed from USInt to Int
	// 01.05.01   11.10.2019    AL                  bugfix lockBuffer
	// 01.05.02   19.05.2020    CR                  new errorId when input 'driveObjectId' is out of range
	// 
	//------------------------------------------------------------------------------------------
	// Function block: LAcycCom_ReadDriveMessagesDateTime
	//===========================================================================================
	
	// Check if FB is triggered
	IF (#execute = TRUE) AND (#statExecuteOld = FALSE) AND (#statBusy = TRUE) THEN
	  // Input execute is set during processing
	  #status := #WARN_EXECUTE_SET_DURING_PROCESSING;
	  #statWarningRetriggering := TRUE;
	  #statExecuteOld := #execute;
	  
	ELSIF (#execute = TRUE) AND (#statExecuteOld = FALSE) THEN
	  // First call
	  // Functionality is busy
	  #statBusy := TRUE;
	  
	  // Reset other outputs
	  #statError := FALSE;
	  #statDone := FALSE;
	  #statStatus := #STATUS_FIRST_CALL;
	  #status := #statStatus;
	  
	  #busy := #statBusy;
	  #error := #statError;
	  #done := #statDone;
	  #statExecuteOld := #execute;
	  
	  // Initialize
	  #statAlarmsInput := #alarms;
	  #statFaultsInput := #faults;
	  #statSIMessagesInput := #siMessages;
	  #statDriveObjectId := #driveObjectId;
	  #statHardwareId := #hardwareId;
	  #statOffset := 0;
	  #statIndexNew := 0;
	  #diagnostics := #tempVoidDiagnostics;
	  #diagnostics.firstParameterError := -1; // V1.3.2
	  #diagnostics.errorValue := 16#FF; // V1.3.2
	  #statWarningNoMessages := FALSE;
	  #statWarningRetriggering := FALSE;
	  #statCurrentMessage := 0;
	  #statFaultsComplete := FALSE;
	  #statAlarmsComplete := FALSE;
	  // Set a default value to first entry in dataset
	  #statDataset[0].errorValue := #INIT_DATASET;
	  // Set init time for comparison (sorting)
	  #statDTL := #tempDTL;
	  
	  // Check if array limits ok
	  IF "LACYCCOM_MESSAGES_UPPER_LIM" < #MESSAGES_UPPER_LIM_LOCAL THEN
	    #statError := TRUE;
	    #statStatus := #ERR_ARRAY_LIMITS;
	    RETURN;
	  END_IF;
	  
	  IF (#statDriveObjectId > #MAX_DRIVE_OBJECT_NO)
	    OR (#statDriveObjectId = 0)
	  THEN // V1.5.2
	    // Wrong drive object ID at input
	    #statError := TRUE;
	    #statStatus := #ERR_INVALID_DRIVE_OBJECT_ID;
	    RETURN;
	  END_IF;
	  
	  // Clearing static and output area for alarms, faults and SI messages 
	  #statBuffer := #tempBuffer;
	  #messages := #tempBuffer;
	  // Write diagnostics
	  #diagnostics.hardwareId := #statHardwareId;
	  
	  // Call ReadDriveParams with FALSE
	  #instReadDriveParams(execute := FALSE,
	                       requestBuffer := #requestBuffer,
	                       dataset := #statDataset);
	  
	  // Check if device hardware address exist
	  #tempRetVal := LOG2GEO(LADDR := #statHardwareId,
	                         GEOADDR := #tempGeoAddr);
	  // Check if everything is okay
	  IF #tempRetVal <> 0 THEN
	    #statError := TRUE;
	    #diagnostics.subfunctionStatus := INT_TO_WORD(#tempRetVal);
	    #statStatus := #ERR_HW_ID;
	    RETURN;
	    
	  END_IF;
	  
	  // Alarms or faults or SI messages
	  IF #statSIMessagesInput = TRUE THEN
	    #statFBState := #FB_SIMESSAGES_DATASET;
	  ELSIF #statFaultsInput = TRUE THEN
	    #statFBState := #FB_FAULTS_DATASET;
	  ELSIF #statAlarmsInput = TRUE THEN
	    #statFBState := #FB_ALARMS_GONE_DATASET;
	  ELSE
	    // Warning. At least one of three inputs must be selected
	    #statStatus := #STATUS_FINISHED_NO_MSG_SELECTED;
	    #statFBState := #FB_SORTING;
	    #statWarningNoMessages := TRUE;
	  END_IF;
	  
	  //
	  RETURN;
	  
	  // Check if FB is disabled (falling edge) after job is done or FB is in error state
	ELSIF (#execute = FALSE AND #statBusy = FALSE) AND
	  (#statError = TRUE OR #statDone = TRUE)
	THEN
	  // Error outputs are reset with falling edge of enable input
	  #statError := FALSE;
	  
	  // Enable and busy are reset with falling edge of enable input
	  #statDone := FALSE;
	  #statBusy := FALSE;
	  
	  // Write outputs
	  #statStatus := #STATUS_NO_CALL;
	  #status := #statStatus;
	  #busy := #statBusy;
	  #done := #statDone;
	  #error := #statError;
	  #statFBState := #FB_IDLE;
	  
	  #statExecuteOld := #execute;
	  RETURN;
	  
	  // FB is currently executed and not finished
	ELSIF #statBusy = TRUE THEN
	  #statExecuteOld := #execute;
	  
	  // FB is disabled
	ELSE
	  #statExecuteOld := #execute;
	  RETURN;
	END_IF;
	
	//----------------------------------------------------------------------------------------------
	IF (#statBusy = TRUE) AND (#statError = FALSE) THEN  // Functionality running
	  CASE #statFBState OF
	      
	    #FB_ALARMS_DATASET:
	      // Preparing dataset for ReadDriveParams  
	      // Alarms
	      FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	        #tempUInt := SINT_TO_UINT(#tempLoopIndex);
	        // Index 0 ..7 - r2122 - "Alarm Code"
	        #statDataset[#tempLoopIndex].parameterNumber := 2122;
	        #statDataset[#tempLoopIndex].index := #tempUInt;
	        // Index 8 ..15 - r2124 - "Alarm Info"
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].parameterNumber := 2124;
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].index := #tempUInt;
	        // Index 16 .. 23 - r2145 - "Alarm come time in days"
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].parameterNumber := 2145;
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].index := #tempUInt;
	        // Index 24 .. 31 - r2123 - "Alarm come time in ms"
	        #statDataset[#tempLoopIndex + #OFFSET_MS].parameterNumber := 2123;
	        #statDataset[#tempLoopIndex + #OFFSET_MS].index := #tempUInt;
	      END_FOR;
	      #statFBState := #FB_READ_STEP_1;
	      #statCurrentMessage := "LACYCCOM_TYPE_ALARM";
	      
	      
	    #FB_FAULTS_DATASET:
	      // Preparing dataset for ReadDriveParams
	      // Faults
	      FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	        #tempUInt := SINT_TO_UINT(#tempLoopIndex);
	        // Index 0 ..7 - r945 - "Fault Code"
	        #statDataset[#tempLoopIndex].parameterNumber := 945;
	        #statDataset[#tempLoopIndex].index := #tempUInt;
	        // Index 8 ..15 - r949 - "Fault Info"
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].parameterNumber := 949;
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].index := #tempUInt;
	        // Index 16 .. 23 - r2130 - "Fault come time in days"
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].parameterNumber := 2130;
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].index := #tempUInt;
	        // Index 24 .. 31 - r948 - "Fault come time in ms"
	        #statDataset[#tempLoopIndex + #OFFSET_MS].parameterNumber := 948;
	        #statDataset[#tempLoopIndex + #OFFSET_MS].index := #tempUInt;
	        #statGoneAlarms[#tempLoopIndex] := FALSE;
	      END_FOR;
	      #statFBState := #FB_READ_STEP_1;
	      #statCurrentMessage := "LACYCCOM_TYPE_FAULT";
	      
	      
	    #FB_SIMESSAGES_DATASET:
	      // Preparing dataset for ReadDriveParams
	      // SI Messages
	      FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	        #tempUInt := SINT_TO_UINT(#tempLoopIndex);
	        // Index 0 ..7 - r9747 - "SI Code"
	        #statDataset[#tempLoopIndex].parameterNumber := 9747;
	        #statDataset[#tempLoopIndex].index := #tempUInt;
	        // Index 8 ..15 - r9749 - "SI Info"
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].parameterNumber := 9749;
	        #statDataset[#tempLoopIndex + #OFFSET_INFO].index := #tempUInt;
	        // Index 16 .. 23 - r9754- "SI Message come time in days"
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].parameterNumber := 9754;
	        #statDataset[#tempLoopIndex + #OFFSET_DAYS].index := #tempUInt;
	        // Index 24 .. 31 - r9748 - "SI Message come time in ms"
	        #statDataset[#tempLoopIndex + #OFFSET_MS].parameterNumber := 9748;
	        #statDataset[#tempLoopIndex + #OFFSET_MS].index := #tempUInt;
	        #statGoneAlarms[#tempLoopIndex] := FALSE;
	      END_FOR;
	      #statFBState := #FB_READ_STEP_1;
	      #statCurrentMessage := "LACYCCOM_TYPE_SI_MESSAGE";
	      
	      
	    #FB_ALARMS_GONE_DATASET:
	      IF NOT #instReadDriveParams.busy AND
	        NOT #instReadDriveParams.done AND
	        NOT #instReadDriveParams.error
	      THEN
	        // Prepare dataset
	        FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	          #tempUInt := SINT_TO_UINT(#tempLoopIndex);
	          // Index 0..7 - r2125 - "Alarm time removed in milliseconds"
	          #statDataset[#tempLoopIndex].parameterNumber := 2125;
	          #statDataset[#tempLoopIndex].index := #tempUInt;
	        END_FOR;
	      END_IF;
	      
	      // Call ReadDriveParams
	      #instReadDriveParams(execute := TRUE,
	                           parameterCount := #ELEMENTS_COUNT_UPPER_LIM + 1, //8 parameter
	                           driveObjectId := #statDriveObjectId,
	                           hardwareId := #statHardwareId,
	                           requestBuffer := #requestBuffer,
	                           dataset := #statDataset);
	      
	      IF NOT #instReadDriveParams.busy THEN
	        #diagnostics := #instReadDriveParams.diagnostics;
	        IF #instReadDriveParams.done = TRUE THEN
	          // To determine what alarms are already gone
	          FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	            IF #statDataset[#tempLoopIndex].value <> #EMPTY_ENTRY THEN
	              #statGoneAlarms[#tempLoopIndex] := TRUE;
	            END_IF;
	          END_FOR;
	          // Call ReadDriveParams with FALSE
	          #instReadDriveParams(execute := FALSE,
	                               requestBuffer := #requestBuffer,
	                               dataset := #statDataset);
	          // Go next
	          #statFBState := #FB_ALARMS_DATASET;
	          
	        ELSIF #instReadDriveParams.error = TRUE THEN
	          #statError := TRUE;
	          // HwId wrong
	          IF (#instReadDriveParams.status = #INT_ERR_WRREC OR #instReadDriveParams.status = #INT_ERR_RDREC) AND
	            ((#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_NOT_CONFIG)
	            OR (#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_NOT_KNOWN)
	            OR (#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_LOG_START_ADDR))
	          THEN
	            #statStatus := #ERR_HW_ID;
	            // Drive object does not exist
	          ELSIF #statDataset[0].errorValue = #DO_NOT_EXIST THEN
	            #statStatus := #ERR_DO_ID;
	          ELSE
	            #statStatus := #ERR_READ_DRIVE_PARAMS_ALARMS_GONE;
	            
	          END_IF;
	          
	        END_IF;
	      END_IF;
	      
	      
	    #FB_READ_STEP_1:
	      // Call ReadDriveParams
	      #instReadDriveParams(execute := TRUE,
	                           parameterCount := #PARAMETER_COUNT_READ_UPPER_LIM + 1, // 32 parameter
	                           driveObjectId := #statDriveObjectId,
	                           hardwareId := #statHardwareId,
	                           requestBuffer := #requestBuffer,
	                           dataset := #statDataset);
	      
	      IF NOT #instReadDriveParams.busy THEN
	        #diagnostics := #instReadDriveParams.diagnostics;
	        IF #instReadDriveParams.done = TRUE THEN
	          // Copy to static area only elements with content
	          FOR #tempLoopIndex := 0 TO #ELEMENTS_COUNT_UPPER_LIM DO
	            IF NOT #statGoneAlarms[#tempLoopIndex] THEN
	              #statBuffer.code[#statOffset] := DWORD_TO_UINT(#statDataset[#tempLoopIndex].value);
	              // If parameter empty - then go next
	              IF #statDataset[#tempLoopIndex].value = #EMPTY_ENTRY THEN
	                EXIT;
	              END_IF;
	              #statBuffer.info[#statOffset] := #statDataset[#tempLoopIndex + #OFFSET_INFO].value;
	              #tempDate := UDINT_TO_DATE(DWORD_TO_UDINT(#statDataset[#tempLoopIndex + #OFFSET_DAYS].value) - #OFFSET_DATE);
	              #tempTime := DWORD_TO_TOD(#statDataset[#tempLoopIndex + #OFFSET_MS].value);
	              #statBuffer.comeDateAndTime[#statOffset] := CONCAT_DATE_TOD(IN1 := #tempDate, IN2 := #tempTime);
	              #statBuffer.type[#statOffset] := #statCurrentMessage; // Identifier for message
	              #statOffset := #statOffset + 1;
	            END_IF;
	          END_FOR;
	          // Set "complete" flag
	          CASE #statCurrentMessage OF
	            "LACYCCOM_TYPE_ALARM":
	              #statAlarmsComplete := TRUE;
	            "LACYCCOM_TYPE_FAULT":
	              #statFaultsComplete := TRUE;
	            ELSE
	              ;
	          END_CASE;
	          // Go next step
	          #statFBState := #FB_READ_STEP_2;
	          
	          // Error while reading  with ReadDriveParams
	        ELSIF #instReadDriveParams.error = TRUE THEN
	          #statError := TRUE;
	          // HwId wrong
	          IF (#instReadDriveParams.status = #INT_ERR_WRREC OR #instReadDriveParams.status = #INT_ERR_RDREC) AND
	            ((#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_NOT_CONFIG)
	            OR (#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_NOT_KNOWN)
	            OR (#instReadDriveParams.diagnostics.subfunctionStatus = #INT_ERR_LOG_START_ADDR))
	          THEN
	            #statStatus := #ERR_HW_ID;
	            // Drive object does not exist
	          ELSIF #statDataset[0].errorValue = #DO_NOT_EXIST THEN
	            #statStatus := #ERR_DO_ID;
	          ELSE
	            CASE #statCurrentMessage OF
	              "LACYCCOM_TYPE_ALARM":
	                #statStatus := #ERR_READ_DRIVE_PARAMS_ALARMS;
	              "LACYCCOM_TYPE_FAULT":
	                #statStatus := #ERR_READ_DRIVE_PARAMS_FAULTS;
	              "LACYCCOM_TYPE_SI_MESSAGE":
	                #statStatus := #ERR_READ_DRIVE_PARAMS_SI_MESSAGES;
	              ELSE
	                ;
	            END_CASE;
	            
	          END_IF;
	          
	          
	        END_IF;
	      END_IF;
	      
	    #FB_READ_STEP_2:
	      // Call ReadDriveParams with FALSE
	      #instReadDriveParams(execute := FALSE,
	                           requestBuffer := #requestBuffer,
	                           dataset := #statDataset);
	      
	      // Choice next step. Right call order: SI messages, faults, alarms
	      IF #statFaultsInput AND NOT #statFaultsComplete THEN
	        #statFBState := #FB_FAULTS_DATASET;
	      ELSIF (#statAlarmsInput AND NOT #statAlarmsComplete) THEN
	        #statFBState := #FB_ALARMS_GONE_DATASET;
	      ELSE
	        #statFBState := #FB_SORTING;
	      END_IF;
	      
	    #FB_SORTING:
	      // When at least one message has been read
	      IF #statOffset <> 0 THEN
	        // Sorting algorithm. Newest message - first
	        // When more then two messages of different type have the same come time, then order sequence is - alarms, faults, SI messages
	        FOR #tempSort := 0 TO (#statOffset - 1) DO
	          // Find newest element
	          FOR #tempLoopIndex := 0 TO (#statOffset - 1) DO
	            IF #statBuffer.comeDateAndTime[#tempLoopIndex] >= #statDTL THEN
	              #statDTL := #statBuffer.comeDateAndTime[#tempLoopIndex];
	              #statIndexNew := #tempLoopIndex;
	            END_IF;
	          END_FOR;
	          
	          // Copy found element to output structure
	          #messages.code[#tempSort] := #statBuffer.code[#statIndexNew];
	          #messages.info[#tempSort] := #statBuffer.info[#statIndexNew];
	          #messages.comeDateAndTime[#tempSort] := #statBuffer.comeDateAndTime[#statIndexNew];
	          #messages.type[#tempSort] := #statBuffer.type[#statIndexNew];
	          // Remove this element from buffer - by setting the value as small as possible
	          #statBuffer.comeDateAndTime[#statIndexNew] := #tempDTL;
	          // Set init time for next comparison
	          #statDTL := #tempDTL;
	        END_FOR;
	      END_IF;
	      // Set "done" flag
	      #statDone := TRUE;
	      
	    ELSE
	      #statError := TRUE;
	      #statStatus := #ERR_UNDEFINED_STATE;
	  END_CASE;
	END_IF;
	
	//----------------------------------------------------------------------------------------------
	// Write outputs and error handling
	//----------------------------------------------------------------------------------------------
	// Error occurred in request
	IF #statError = TRUE
	THEN
	  #statDone := FALSE;
	  #statBusy := FALSE;
	  // Write diagnostics
	  #diagnostics.stateNumber := #statFBState;
	  #diagnostics.status := #statStatus;
	  
	  // Request finished
	ELSIF #statDone = TRUE
	THEN
	  #statBusy := FALSE;
	  #statError := FALSE;
	  #statFBState := #FB_IDLE;
	  // Set status
	  IF #statWarningRetriggering = TRUE THEN
	    // If input execute is set during processing
	    #statStatus := #ERR_AMBIGUOUS_FB_CALL;
	    #diagnostics.status := #statStatus;
	    #statError := TRUE;
	    #statDone := FALSE;
	  ELSIF #statWarningNoMessages = FALSE THEN
	    // Execution finished without errors
	    #statStatus := #STATUS_EXECUTION_FINISHED;
	  ELSE
	    // Warning. At least one of three inputs must be selected
	    #statStatus := #STATUS_FINISHED_NO_MSG_SELECTED;
	    #diagnostics.status := #statStatus;
	  END_IF;
	  
	  // If input execute is set during processing
	ELSIF #statWarningRetriggering = TRUE
	THEN
	  #statStatus := #WARN_EXECUTE_SET_DURING_PROCESSING;
	  
	  // Request in execution
	ELSE
	  #statStatus := #STATUS_SUBSEQUENT_CALL;
	END_IF;
	
	// Write static values to outputs
	#done := #statDone;
	#busy := #statBusy;
	#error := #statError;
	#status := #statStatus;
	//----------------------------------------------------------------------------------------------
END_FUNCTION_BLOCK

