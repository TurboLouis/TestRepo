FUNCTION_BLOCK "LConSMC_DiameterCalculation"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enable : Bool := FALSE;
      holdDiameter : Bool := FALSE;
      metricUnits : Bool := TRUE;
      setDiameter : Bool := FALSE;
      lineFeedback : LReal := 0.0;
      lineVelocity : LReal := 0.0;
      windingShaftFeedback : LReal := 0.0;
      shaftSpeed : LReal := 0.0;
      selectDiamMode : Int := 0;
      typeOfWinder : Int := 0;
      tCycle : Real := 0.0;
   END_VAR

   VAR_OUTPUT 
      error : Bool := FALSE;
      errorID : DWord := 16#0000_0000;
      busy : Bool := FALSE;
      diamModeInUse : Int := 0;
      atMinDia : Bool := FALSE;
      atMaxDia : Bool := FALSE;
      diamIsHold : Bool := FALSE;
      calculatedWebThickness : LReal := 0.0;
   END_VAR

   VAR_IN_OUT 
      diameter : LReal := 0.0;
      diamConfig : "LConSMC_typeDiamConfig";
   END_VAR

   VAR 
      statEnableOld : Bool;
      statBusy : Bool;
      statSetDiameter : Bool;
      statErrorLinePT1 : Bool;
      statErrorShaftPT1 : Bool;
      statErrorDiameterPT1 : Bool;
      statErrorLineInt : Bool;
      statDiamIsHold : Bool;
      statErrorShaftInt : Bool;
      statResetIntegrators : Bool;
      statDiamHoldImplicit : Bool;
      statCalculateFirstDiameter : Bool;
      statFirstDiameterOutputDone : Bool;
      statFirstDeltaEntered : Bool;
      statArrayEntryIntervalPassed : Bool;
      statOutputRateIntervalPassed : Bool;
      statLatchRawValue : Bool;
      statBufferFilled : Bool;
      statUseDactRawValue : Bool;
      statLatchNow : Bool;
      statSetDiameterValue : Bool;
      statWebThicknessNeeded : Bool;
      statPosBasedCalc : Bool;
      statDiamModeChanged : Bool;
      statInitializeDiamCalcPosition : Bool;
      statError : Bool;
      statErrorIDLinePT1 : DWord;
      statErrorIDShaftPT1 : DWord;
      statErrorIDDiameterPT1 : DWord;
      statErrorIDShaftInt : DWord;
      statErrorIDLineInt : DWord;
      statIntervalCounter : Int;
      statDiamModeInUse : Int := 0;
      statArrayCounter : DInt;
      statRawDiameter : LReal;
      statDiameterInterpolated : LReal;
      statAbsLinVelocity : LReal;
      statAbsShaftSpeed : LReal;
      statCalcRoot : LReal;
      statRadiusOffset : LReal;
      statDiameterSetValLimited : LReal;
      statFirstArrayEntryPosition : LReal;
      statDeltaShaftRev : LReal;
      statDeltaLineRev : LReal;
      statDeltaShaft : LReal;
      statDeltaLine : LReal;
      statWindShaftStart : LReal;
      startLineStart : LReal;
      statBufferSize : LReal;
      statFloatingDeltaShaft : LReal;
      statFloatingDeltaLine : LReal;
      statDactRawValUnlimited : LReal;
      statWebThickness : LReal;
      statTargetDia : LReal;
      statTargetDiaLast : LReal;
      statTemp1 : LReal;
      statDeltaShaftArray : Array[0..#MAX_LENGTH_AVERAGE_VALUE] of LReal;
      statDeltaLineArray : Array[0..#MAX_LENGTH_AVERAGE_VALUE] of LReal;
      statDeltaArrayZero : Array[0..#MAX_LENGTH_AVERAGE_VALUE] of LReal;
      instLinePT1 : "LConSMC_PT1";
      instShaftPT1 : "LConSMC_PT1";
      instDiameterPT1 : "LConSMC_PT1";
      instShaftInt : "LConSMC_Integrator";
      instLineInt : "LConSMC_Integrator";
      instRTrigBusy {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      instTrigArrayEntryIntervalPassed {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      instTrigHold {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
   END_VAR

   VAR CONSTANT 
      UNIT_ID : DWord := 16#5104_0000;
      Pi : Real := 3.141592;
      DINT_SCALE : Real := 1.073742E+09;
      INT_SCALE : Real := 16384.0;
      PERCENT_SCALE : Real := 100.0;
      NO_ERROR : DWord := 16#0000_0000;
      REWIND_FROM_ABOVE : Int;
      REWIND_FROM_BELOW : Int := 1;
      UNWIND_FROM_ABOVE : Int := 2;
      UNWIND_FROM_BELOW : Int := 3;
      MAX_REAL_VALUE : Real := 3.402823E+38;
      MAX_LENGTH_AVERAGE_VALUE : Int := 50;
   END_VAR


BEGIN
	//------------------------------------------------------------------------------------------------------------------------
	//SIEMENS DF FA PMA APC / Mumbai,India | Erlangen, Germany
	//------------------------------------------------------------------------------------------------------------------------
	//name          : DiamCalcDivision
	//functionality : Diameter calculation
	//assignment    : OB3x (cyclic interupt), OB6x (synchronous operation)
	//library       : LCon   
	//------------------------------------------------------------------------------------------------------------------------
	//change log table:
	//version   date          expert in charge              changes applied
	//V1.0      15.05.2019    APC ERL                       Creation
	//V1.1      18.11.2019    APC Erlangen                  Bugfix: After the first initialization the correct diameter
	//                                                      value is used now. (*c_00019*)
	//V1.2      16.07.2021    APC Erlangen                  Bugfix calculating condition for outputs atMinDia/atMaxDia in mode Intragal and Position (*c_00040*)                                                     
	//========================================================================================================================
	IF #enable AND NOT #statEnableOld THEN
	    // Initialize parameters
	    #atMinDia := FALSE;
	    #atMaxDia := FALSE;
	    #statBusy := FALSE;
	    #error := FALSE;
	    #statError := FALSE;
	    #statDiamIsHold := FALSE;
	    #statOutputRateIntervalPassed := FALSE;
	    #errorID := #NO_ERROR;
	    #statWebThickness := 0.0;
	    #statErrorLinePT1 := FALSE;
	    #statErrorLineInt := FALSE;
	    #statErrorShaftPT1 := FALSE;
	    #statErrorShaftInt := FALSE;
	    #statUseDactRawValue := FALSE;
	    #statErrorDiameterPT1 := FALSE;
	    #statErrorIDLinePT1 := #NO_ERROR;
	    #statErrorIDLineInt := #NO_ERROR;
	    #statErrorIDShaftPT1 := #NO_ERROR;
	    #statErrorIDShaftInt := #NO_ERROR;
	    #statErrorIDDiameterPT1 := #NO_ERROR;
	    #statDiameterInterpolated := #diameter; (*c_00019*)
	    #statTargetDia := #diameter;
	    #statTargetDiaLast := #diameter;
	    #statFirstDiameterOutputDone := FALSE;
	    #statCalculateFirstDiameter := FALSE;
	    #statFloatingDeltaShaft := 0.0;
	    #statFloatingDeltaLine := 0.0;
	    #statDeltaShaftArray := #statDeltaArrayZero;
	    #statDeltaLineArray := #statDeltaArrayZero;
	    #statIntervalCounter := 0;
	    
	    IF #tCycle = 0.0 THEN
	        #atMinDia := TRUE;
	        #atMaxDia := TRUE;
	        #statError := TRUE;
	        #errorID := #UNIT_ID OR "LCON_ERROR_CYCLE_TIME_ZERO";                                // FB NO Valid Data return
	    ELSE
	        #statBusy := TRUE;
	        #statRawDiameter := #diameter;           //save in out diameter and initialize PT1 Blocks 
	        #statRadiusOffset := #diameter / 2.0;
	        #instLinePT1(set := true,
	                     setvalue := ABS(#lineVelocity),
	                     tCycle := #tCycle);
	        
	        #instShaftPT1(set := true,
	                      setvalue := ABS(#shaftSpeed),
	                      tCycle := #tCycle);
	        
	        #instDiameterPT1(set := true,
	                         setvalue := #statRawDiameter,
	                         tCycle := #tCycle);
	        
	        #instShaftInt(set := True,
	                      setValue := #diameter,
	                      upperLimit := #diamConfig.#maxDia,
	                      lowerLimit := #diamConfig.#minDia,
	                      tCycle := #tCycle);
	    END_IF;
	END_IF;
	IF NOT #enable AND #statEnableOld THEN
	    #statError := FALSE;
	    #atMinDia := FALSE;
	    #atMaxDia := FALSE;
	    #statBusy := FALSE;
	    #error := FALSE;
	    #statWebThickness := 0.0;
	    #errorID := #NO_ERROR;
	    #statEnableOld := #enable;
	    #statErrorLinePT1 := FALSE;
	    #statErrorLineInt := FALSE;
	    #statErrorShaftPT1 := FALSE;
	    #statErrorShaftInt := FALSE;
	    #statErrorDiameterPT1 := FALSE;
	    #statErrorShaftInt := FALSE;
	    #diamModeInUse := #selectDiamMode;
	    #statErrorIDLinePT1 := #NO_ERROR;
	    #statErrorIDLineInt := #NO_ERROR;
	    #statErrorIDShaftPT1 := #NO_ERROR;
	    #statErrorIDShaftInt := #NO_ERROR;
	    #statErrorIDDiameterPT1 := #NO_ERROR;
	    RETURN;
	END_IF;
	#statEnableOld := #enable;
	#statWebThicknessNeeded := #selectDiamMode = ("LCON_DIAM_CALC_MODE_ADDITION") OR (#selectDiamMode = "LCON_DIAM_CALC_MODE_WEB_LENGTH");
	#statPosBasedCalc := #selectDiamMode = "LCON_DIAM_CALC_MODE_POSITION";
	IF (#diamConfig.#minDia <= 0.0)
	    OR (#diamConfig.#maxDia <= 0.0)
	    OR (#diamConfig.#minDia >= #diamConfig.#maxDia)
	    OR #diamConfig.#diameterFilterTime < 0.0
	    OR (#diamConfig.webThickness <= 0.0 AND #statWebThicknessNeeded)
	    OR #typeOfWinder < 0
	    OR #typeOfWinder > 3
	    OR (#diamConfig.#measuringRevolutionCount <= 0.0)
	    OR (#diamConfig.#measuringRevolutionCount < #diamConfig.#diameterOutputRate)
	    OR (((#diamConfig.#windingShaftFeedbackScal <= 0.0) OR (#diamConfig.#lineFeedbackScal <= 0.0)) AND #statPosBasedCalc)
	THEN
	    #atMinDia := TRUE;
	    #atMaxDia := TRUE;
	    IF NOT #statError THEN  // Do not override error
	        #statError := TRUE;
	        #errorID := #UNIT_ID OR "LCON_ERROR_INVALID_CONFIGURATION";                       // FB NO Valid Data return
	    END_IF;
	ELSIF #selectDiamMode < 0 OR #selectDiamMode > 5 THEN
	    #atMinDia := TRUE;
	    #atMaxDia := TRUE;
	    IF NOT #statError THEN  // Do not override error
	        #statError := TRUE;
	        #errorID := #UNIT_ID OR "LCON_ERROR_INVALID_DIAMETER_MODE";
	    END_IF;
	END_IF;
	
	IF #statError THEN
	    #error := #statError;
	    #busy := #statBusy := FALSE;
	    RETURN;
	END_IF;
	IF #selectDiamMode <> #statDiamModeInUse THEN
	    #statDiamModeInUse := #selectDiamMode;
	    #statInitializeDiamCalcPosition := TRUE;                // set initialize bit for possibly next use of diam mode DIAM_CALC_POSITION
	    #statDiamModeChanged := TRUE;
	    #statFirstDiameterOutputDone := FALSE;
	    #statCalculateFirstDiameter := FALSE;
	    #statLatchRawValue := FALSE;
	    #statFloatingDeltaShaft := 0.0;
	    #statFloatingDeltaLine := 0.0;
	    #statDeltaShaftArray := #statDeltaArrayZero;
	    #statDeltaLineArray := #statDeltaArrayZero;
	    #statIntervalCounter := 0;
	ELSE
	    #statDiamModeChanged := FALSE;
	END_IF;
	
	IF #statBusy THEN
	    #instRTrigBusy(CLK := #statBusy);
	    REGION Filter line/winder speed
	        #statSetDiameter := #setDiameter AND (ABS(#instShaftPT1.y) < ABS(#diamConfig.#minShaftSpeed));               //setDiameter:True = Set diameter to diameter set value  FALSE: Diameter Calculation
	        #statDiamHoldImplicit := ((ABS(#shaftSpeed) < ABS(#diamConfig.#minShaftSpeed)) OR (ABS(#lineVelocity) < ABS(#diamConfig.#minLineVelocity))) AND (#statDiamModeInUse <> "LCON_DIAM_CALC_MODE_EXTERNAL");  // Speed for Diameter Calc is not reached  
	        // Filter the line speed
	        #instLinePT1(set := #statSetDiameter OR #statDiamModeChanged,
	                     x := #lineVelocity,
	                     setvalue := #lineVelocity,
	                     smoothingTime := #diamConfig.#lineFilterTime,
	                     tCycle := #tCycle,
	                     error => #statErrorLinePT1,
	                     errorID => #statErrorIDLinePT1);
	        // Filter the actual shaft speed
	        #instShaftPT1(set := #statSetDiameter OR #statDiamModeChanged,                      //PT1 set controlled by mysetDiameter
	                      x := #shaftSpeed,
	                      setvalue := #shaftSpeed,
	                      smoothingTime := #diamConfig.#shaftFilterTime,
	                      tCycle := #tCycle,
	                      error => #statErrorShaftPT1,
	                      errorID => #statErrorIDShaftPT1);
	    END_REGION
	    
	    #statDiameterSetValLimited := LIMIT(MN := #diamConfig.#minDia,            // [ LU ]
	                                        IN := #diamConfig.#diameterSetValue,  // [ LU ]
	                                        MX := #diamConfig.#maxDia);           // [ LU ]
	    
	    CASE #statDiamModeInUse OF
	        "LCON_DIAM_CALC_MODE_DIVISION":
	            REGION DiamCalcDivision
	                #statUseDactRawValue := TRUE;
	                #statAbsLinVelocity := ABS(#instLinePT1.y);
	                #statAbsShaftSpeed := ABS(#instShaftPT1.y);
	                IF NOT #statDiamHoldImplicit
	                    AND NOT #holdDiameter
	                THEN
	                    IF #metricUnits THEN
	                        #statDactRawValUnlimited := (#statAbsLinVelocity / #statAbsShaftSpeed / #Pi);
	                    ELSIF NOT #metricUnits THEN
	                        #statDactRawValUnlimited := (#statAbsLinVelocity / #statAbsShaftSpeed / #Pi) * 12;
	                    END_IF;
	                    #statDiamIsHold := FALSE;
	                ELSE
	                    #statDiamIsHold := TRUE;
	                END_IF;
	                IF #statSetDiameter THEN
	                    #statDactRawValUnlimited := #statDiameterSetValLimited;
	                END_IF;
	            END_REGION
	        "LCON_DIAM_CALC_MODE_ADDITION":
	            REGION DiamCalcAddition
	                // Check if above min speeds for calcualtions and not diameter Hold  
	                #statUseDactRawValue := TRUE;
	                IF ((ABS(#instShaftPT1.y) >= ABS(#diamConfig.#minShaftSpeed)) AND NOT #holdDiameter) OR #statSetDiameter OR #statDiamModeChanged THEN
	                    #statDiamIsHold := FALSE;
	                    IF #statDiamModeChanged AND NOT #statSetDiameter THEN
	                        #instShaftInt(set := TRUE,
	                                      x := 0.0,
	                                      setValue := #statDiameterInterpolated,//#diameter,
	                                      upperLimit := #diamConfig.#maxDia,                                                                                                      //upper limit assigned to maxDia
	                                      lowerLimit := #diamConfig.#minDia,                                                                                                      //lower limit assigned to minDia
	                                      integralTime := 1000.0,
	                                      tCycle := #tCycle,
	                                      error => #statErrorShaftInt,
	                                      errorID => #statErrorIDShaftInt);
	                    END_IF;
	                    #instShaftInt(set := #statSetDiameter,
	                                  x := SEL(G := ((#typeOfWinder = #REWIND_FROM_BELOW) OR (#typeOfWinder = #UNWIND_FROM_ABOVE)),                          // Invert counting to drive speed
	                                           IN0 := #instShaftPT1.y / 60 * ABS(#diamConfig.webThickness) * 2,
	                                           IN1 := #instShaftPT1.y / 60 * - ABS(#diamConfig.webThickness) * 2),
	                                  setValue := #statDiameterSetValLimited,
	                                  upperLimit := #diamConfig.#maxDia,                                                                                                      //upper limit assigned to maxDia
	                                  lowerLimit := #diamConfig.#minDia,                                                                                                      //lower limit assigned to minDia
	                                  integralTime := 1000.0,
	                                  tCycle := #tCycle,
	                                  error => #statErrorShaftInt,
	                                  errorID => #statErrorIDShaftInt);
	                ELSE
	                    #statDiamIsHold := TRUE;
	                END_IF;
	                #statDactRawValUnlimited := #instShaftInt.y;
	                #atMaxDia := #instShaftInt.upperLimitReached;
	                #atMinDia := #instShaftInt.lowerLimitReached;
	            END_REGION
	        "LCON_DIAM_CALC_MODE_INTEGRAL":
	            REGION DiamCalcIntegral
	                #statUseDactRawValue := FALSE;
	                REGION Integrate line and winder speed
	                    #instLineInt(set := #statResetIntegrators OR #statDiamModeChanged,
	                                 x := #instLinePT1.y / 60.0,
	                                 setValue := 0.0,
	                                 upperLimit := 1000.0,
	                                 lowerLimit := -1000.0,
	                                 integralTime := 1000.0,
	                                 tCycle := #tCycle,
	                                 error => #statErrorLineInt,
	                                 errorID => #statErrorIDLineInt);
	                    
	                    #instShaftInt(set := #statResetIntegrators OR #statDiamModeChanged,                // integrate smoothed shaftspeed
	                                  x := (#instShaftPT1.y * 2.0 * #Pi) / 60.0,   // [ RPS ] into [ rad/s ]
	                                  setValue := 0.0,
	                                  upperLimit := 1000.0,
	                                  lowerLimit := -1000.0,
	                                  integralTime := 1000.0,
	                                  tCycle := #tCycle,
	                                  error => #statErrorShaftInt,
	                                  errorID => #statErrorIDShaftInt);
	                END_REGION
	                REGION Calculate buffer events
	                    IF (#diamConfig.#firstDiameterOutput <= #diamConfig.#diameterOutputRate) AND NOT #statCalculateFirstDiameter AND NOT #statFirstDiameterOutputDone THEN
	                        #statCalculateFirstDiameter := (ABS(#instShaftInt.y) >= (ABS(#diamConfig.#firstDiameterOutput) * 2.0 * #Pi));    // latch after (statFirstDiameterOutput) revolution
	                    ELSIF (#diamConfig.#firstDiameterOutput > #diamConfig.#diameterOutputRate) AND NOT #statCalculateFirstDiameter AND NOT #statFirstDiameterOutputDone THEN
	                        #statFirstArrayEntryPosition := "LConSMC_ModuloIEC"(value := ABS(#diamConfig.#firstDiameterOutput), moduloValue := ABS(#diamConfig.#diameterOutputRate));
	                        IF (#statFirstArrayEntryPosition = 0.0) THEN
	                            #statFirstArrayEntryPosition := ABS(#diamConfig.#diameterOutputRate);
	                        END_IF;
	                        IF NOT #statFirstDeltaEntered THEN
	                            #statArrayEntryIntervalPassed := (ABS(#instShaftInt.y) >= (#statFirstArrayEntryPosition) * 2.0 * #Pi);               // enter calculated delta in buffer
	                            #statFirstDeltaEntered := #statArrayEntryIntervalPassed;
	                        ELSE
	                            #statArrayEntryIntervalPassed := (ABS(#instShaftInt.y) >= (ABS(#diamConfig.#diameterOutputRate) * 2.0 * #Pi));   // enter calculated delta in buffer
	                        END_IF;
	                        #instTrigArrayEntryIntervalPassed(CLK := #statArrayEntryIntervalPassed);
	                        IF #instTrigArrayEntryIntervalPassed.Q THEN
	                            #statIntervalCounter := #statIntervalCounter + 1;
	                        END_IF;
	                        IF (#statIntervalCounter >= (ABS(#diamConfig.#firstDiameterOutput) / ABS(#diamConfig.#diameterOutputRate))) THEN
	                            #statCalculateFirstDiameter := TRUE;
	                            #statIntervalCounter := 0;
	                            #statArrayEntryIntervalPassed := FALSE;
	                            #statFirstDeltaEntered := FALSE;
	                        END_IF;
	                    ELSIF #statCalculateFirstDiameter THEN
	                        #statCalculateFirstDiameter := FALSE;
	                        #statFirstDiameterOutputDone := TRUE;
	                    END_IF;
	                    IF #statFirstDiameterOutputDone THEN
	                        #statOutputRateIntervalPassed := (ABS(#instShaftInt.y) >= (ABS(#diamConfig.#diameterOutputRate) * 2.0 * #Pi));           // latch every (r32DiameterOutputRate) revolution
	                    END_IF;
	                    // set bits                    
	                    #statResetIntegrators := #statCalculateFirstDiameter OR #statArrayEntryIntervalPassed OR #statOutputRateIntervalPassed OR #statDiamIsHold;  // measuring interval reached OR "hold diam"
	                    #statLatchRawValue := #statCalculateFirstDiameter OR #statOutputRateIntervalPassed;// output diameter
	                    // copy deltas for floating calculation in buffer
	                    #statDeltaShaftRev := ABS(#instShaftInt.y);
	                    #statDeltaLineRev := ABS(#instLineInt.y);
	                END_REGION
	            END_REGION
	        "LCON_DIAM_CALC_MODE_EXTERNAL":
	            REGION DiamExt
	                #statUseDactRawValue := TRUE;
	                IF NOT #holdDiameter THEN
	                    #statDactRawValUnlimited := #diamConfig.diameterSetValue;
	                END_IF;
	                #statDiamIsHold := #holdDiameter;
	            END_REGION
	        "LCON_DIAM_CALC_MODE_WEB_LENGTH":
	            REGION DiamCalcWebLength
	                #statUseDactRawValue := TRUE;
	                IF #statDiamModeChanged THEN
	                    #statRadiusOffset := #statDiameterInterpolated / 2.0;//#diameter / 2.0;
	                    #instLineInt(set := TRUE,
	                                 x := 0.0,
	                                 setValue := 0.0,
	                                 upperLimit := #MAX_REAL_VALUE,
	                                 lowerLimit := - #MAX_REAL_VALUE,
	                                 integralTime := 1000.0,
	                                 tCycle := #tCycle,
	                                 error => #statErrorLineInt,
	                                 errorID => #statErrorIDLineInt);
	                END_IF;
	                #instLineInt(set := #statResetIntegrators,
	                             x := SEL(G := ((#typeOfWinder = #REWIND_FROM_BELOW) OR (#typeOfWinder = #UNWIND_FROM_ABOVE)),
	                                      IN0 := #instLinePT1.y / 60.0,       // [LU/s]
	                                      IN1 := - #instLinePT1.y / 60.0),    // [LU/s]
	                             setValue := 0.0,
	                             upperLimit := #MAX_REAL_VALUE,
	                             lowerLimit := - #MAX_REAL_VALUE,
	                             integralTime := 1000.0,
	                             tCycle := #tCycle,
	                             error => #statErrorLineInt,
	                             errorID => #statErrorIDLineInt);
	                
	                #statResetIntegrators := (#holdDiameter) OR (#statSetDiameter) OR (ABS(#instLinePT1.y) < ABS(#diamConfig.#minLineVelocity));
	                
	                // Check if above min speeds for calcualtions and not diameter Hold 
	                IF NOT #holdDiameter AND (ABS(#instLinePT1.y) >= ABS(#diamConfig.#minLineVelocity)) THEN
	                    IF #metricUnits THEN //
	                        #statCalcRoot := #instLineInt.y * #diamConfig.webThickness / #Pi + #statRadiusOffset * #statRadiusOffset;        //  [m]
	                    ELSE
	                        #statCalcRoot := #instLineInt.y * 12.0 * #diamConfig.webThickness / #Pi + #statRadiusOffset * #statRadiusOffset; //  [in]
	                    END_IF;
	                    #statDactRawValUnlimited := 2.0 * SQRT(MAX(IN1 := 0, IN2 := #statCalcRoot));
	                    #statDiamIsHold := FALSE;
	                ELSE
	                    #statDiamIsHold := TRUE;
	                    IF #setDiameter THEN
	                        #statDactRawValUnlimited := #statDiameterSetValLimited;
	                        #statRadiusOffset := #statDactRawValUnlimited / 2.0;
	                    ELSE
	                        #statRadiusOffset := #statDactRawValUnlimited / 2.0;
	                    END_IF;
	                END_IF;
	            END_REGION
	        "LCON_DIAM_CALC_MODE_POSITION":
	            REGION DiamCalcPosition
	                #statUseDactRawValue := FALSE;
	                REGION Calculate buffer events
	                    IF #statResetIntegrators THEN
	                        #statDeltaShaft := 0.0;     // reset delta                                 
	                        #statDeltaLine := 0.0;      // reset delta
	                    END_IF;
	                    IF #statInitializeDiamCalcPosition THEN
	                        #statWindShaftStart := #windingShaftFeedback;
	                        #startLineStart := #lineFeedback;
	                        #statDeltaShaft := 0.0;
	                        #statDeltaLine := 0.0;
	                        #statInitializeDiamCalcPosition := FALSE;
	                    END_IF;
	                    // get position difference winder axis (per cycle);  as fbINT3 in DIAM_CALC_INTEGRAL mode
	                    #statDeltaShaft := #statDeltaShaft + "LConSMC_EvaluateModulo"(valueAct := #windingShaftFeedback,
	                                                                                  valueLast := #statWindShaftStart,
	                                                                                  moduloLength := #diamConfig.#shaftModLength);
	                    #statWindShaftStart := #windingShaftFeedback;
	                    // get position difference line axis (per cycle); as fbINT2 in DIAM_CALC_INTEGRAL mode
	                    #statDeltaLine := #statDeltaLine + "LConSMC_EvaluateModulo"(valueAct := #lineFeedback,
	                                                                                valueLast := #startLineStart,
	                                                                                moduloLength := #diamConfig.#lineModLength);
	                    #startLineStart := #lineFeedback;
	                    IF (#diamConfig.#firstDiameterOutput <= #diamConfig.#diameterOutputRate) AND NOT #statCalculateFirstDiameter AND NOT #statFirstDiameterOutputDone THEN
	                        // latch after (statFirstDiameterOutput) revolution
	                        #statCalculateFirstDiameter := ((ABS(#statDeltaShaft) / #diamConfig.#windingShaftFeedbackScal / 2.0 / #Pi) >= ABS(#diamConfig.#firstDiameterOutput));
	                    ELSIF (#diamConfig.#firstDiameterOutput > #diamConfig.#diameterOutputRate) AND NOT #statCalculateFirstDiameter AND NOT #statFirstDiameterOutputDone THEN
	                        #statFirstArrayEntryPosition := "LConSMC_ModuloIEC"(value := ABS(#diamConfig.#firstDiameterOutput), moduloValue := ABS(#diamConfig.#diameterOutputRate));
	                        IF (#statFirstArrayEntryPosition = 0.0) THEN
	                            #statFirstArrayEntryPosition := ABS(#diamConfig.#diameterOutputRate);
	                        END_IF;
	                        IF NOT #statFirstDeltaEntered THEN
	                            // enter calculated delta in buffer
	                            #statArrayEntryIntervalPassed := ((ABS(#statDeltaShaft) / #diamConfig.#windingShaftFeedbackScal / 2.0 / #Pi) >= #statFirstArrayEntryPosition);
	                            #statFirstDeltaEntered := #statArrayEntryIntervalPassed;
	                        ELSE
	                            // enter calculated delta in buffer
	                            #statArrayEntryIntervalPassed := ((ABS(#statDeltaShaft) / #diamConfig.#windingShaftFeedbackScal / 2.0 / #Pi) >= ABS(#diamConfig.#diameterOutputRate));
	                        END_IF;
	                        #instTrigArrayEntryIntervalPassed(CLK := #statArrayEntryIntervalPassed);
	                        IF #instTrigArrayEntryIntervalPassed.Q
	                        THEN
	                            #statIntervalCounter := #statIntervalCounter + 1;
	                        END_IF;
	                        IF (#statIntervalCounter >= (ABS(#diamConfig.#firstDiameterOutput) / ABS(#diamConfig.#diameterOutputRate))) THEN
	                            #statCalculateFirstDiameter := TRUE;
	                            #statIntervalCounter := 0;
	                            #statArrayEntryIntervalPassed := FALSE;
	                            #statFirstDeltaEntered := FALSE;
	                        END_IF;
	                    ELSIF #statCalculateFirstDiameter THEN
	                        #statCalculateFirstDiameter := FALSE;
	                        #statFirstDiameterOutputDone := TRUE;
	                    END_IF;
	                    IF #statFirstDiameterOutputDone THEN
	                        // latch every (statDiameterOutputRate) revolution
	                        #statOutputRateIntervalPassed := ((ABS(#statDeltaShaft) / #diamConfig.#windingShaftFeedbackScal / 2.0 / #Pi) >= ABS(#diamConfig.#diameterOutputRate));
	                    END_IF;
	                    // set bits                    
	                    #statResetIntegrators := #statCalculateFirstDiameter OR #statArrayEntryIntervalPassed OR #statOutputRateIntervalPassed OR #statDiamIsHold;  // measuring interval reached OR "hold diam"
	                    #statLatchRawValue := #statCalculateFirstDiameter OR #statOutputRateIntervalPassed;                                              // output diameter
	                    // copy deltas for floating calculation in buffer
	                    #statDeltaShaftRev := ABS(#statDeltaShaft);
	                    #statDeltaLineRev := ABS(#statDeltaLine);
	                END_REGION
	            END_REGION
	    END_CASE;
	    
	    REGION Floating diameter calculation
	        IF #statDiamModeInUse = "LCON_DIAM_CALC_MODE_INTEGRAL" OR #statDiamModeInUse = "LCON_DIAM_CALC_MODE_POSITION" THEN
	            // floating diameter average (only in case of DIAM_CALC_INTEGRAL, DIAM_CALC_POSITION)
	            // determine buffer size
	            #statBufferSize := ABS(#diamConfig.#measuringRevolutionCount) / ABS(#diamConfig.#diameterOutputRate);
	            IF ("LConSMC_ModuloIEC"(value := #statBufferSize, moduloValue := 1.0) >= 0.5) THEN
	                #statBufferSize := 1 + TRUNC(#statBufferSize);
	            ELSE
	                #statBufferSize := TRUNC(#statBufferSize);
	            END_IF;
	            IF (#statBufferSize > #MAX_LENGTH_AVERAGE_VALUE) THEN
	                #statError := TRUE;
	                #errorID := #UNIT_ID OR "LCON_ERROR_MAX_BUFFER_SIZE_EXCEEDED";
	            ELSE
	                IF #statOutputRateIntervalPassed
	                    OR #statCalculateFirstDiameter
	                    OR #statArrayEntryIntervalPassed
	                THEN
	                    // if buffer filled -> subract existing array element from total value before adding new value
	                    IF #statBufferFilled THEN
	                        #statFloatingDeltaShaft := #statFloatingDeltaShaft - #statDeltaShaftArray[#statArrayCounter];
	                        #statFloatingDeltaLine := #statFloatingDeltaLine - #statDeltaLineArray[#statArrayCounter];
	                    END_IF;
	                    // write new Value in ARRAY
	                    #statDeltaShaftArray[#statArrayCounter] := #statDeltaShaftRev;
	                    #statDeltaLineArray[#statArrayCounter] := #statDeltaLineRev;
	                    // refresh total value
	                    #statFloatingDeltaShaft := #statFloatingDeltaShaft + #statDeltaShaftArray[#statArrayCounter];
	                    #statFloatingDeltaLine := #statFloatingDeltaLine + #statDeltaLineArray[#statArrayCounter];
	                    // Set counter up
	                    #statArrayCounter += 1;
	                    // if ring buffer filled -> begin at Zero
	                    IF (#statArrayCounter > (#statBufferSize - 1)) THEN
	                        #statArrayCounter := 0;
	                        #statBufferFilled := TRUE;
	                    END_IF;
	                END_IF;
	            END_IF;
	            
	            // Calculate diameter raw value (cyclic)
	            IF #statDiamModeInUse = "LCON_DIAM_CALC_MODE_INTEGRAL" THEN
	                IF (#statFloatingDeltaShaft <> 0) THEN
	                    #statDactRawValUnlimited := LREAL_TO_REAL((ABS(#statFloatingDeltaLine) / ABS(#statFloatingDeltaShaft) * 2));                    // S/Angle -> [ LU ]/[ rad ]
	                    IF NOT #metricUnits THEN
	                        #statDactRawValUnlimited *= 12.0; // convert from [ft] -> [inch]
	                    END_IF;
	                END_IF;
	            ELSE  // "LCON_DIAM_CALC_MODE_POSITION"
	                IF (#statFloatingDeltaShaft <> 0.0) THEN
	                    #statDactRawValUnlimited := LREAL_TO_REAL(2.0 * (ABS(#statFloatingDeltaLine) / #diamConfig.#lineFeedbackScal)           // Into LU
	                                                              / (ABS(#statFloatingDeltaShaft) / #diamConfig.#windingShaftFeedbackScal));    // Into rad
	                    IF NOT #metricUnits THEN
	                        #statDactRawValUnlimited *= 12.0; // convert from [ft] -> [inch]
	                    END_IF;
	                END_IF;
	            END_IF;
	        END_IF;
	    END_REGION
	    
	    // Limitation of raw value:
	    #statRawDiameter := LIMIT(MN := #diamConfig.#minDia,        // [ LU ]
	                              IN := #statDactRawValUnlimited,   // [ LU ]
	                              MX := #diamConfig.#maxDia);       // [ LU ]
	    
	    REGION Latch diameter and calculate web thickness
	        #statDiamIsHold := (#holdDiameter) OR (#statDiamHoldImplicit);                              // Diameter Hold 
	        // forced BY FBLConDiameterCalculation input parameter OR speed too slow
	        
	        // compute latch signals and latch control:
	        #statLatchNow := #statLatchRawValue AND (NOT #statDiamIsHold); // if Diameter not Hold and boUseDactRawValue = TRUE  -> Latch value cyclic
	        // if Diameter not Hold and boUseDactRawValue = FALSE -> Latch value with #statLatchRawValue trigger
	        // boUseDactRawValue = TRUE for diamModes <> DIAM_CALC_POSITION, DIAM_CALC_INTEGRAL
	        
	        // web thickness calculation:
	        IF (#statLatchRawValue) AND (#statRawDiameter <> #diameter) THEN   // calculate web thickness only in modes Diam_Calc_Integral and Diam_Calc_Position (in other modes #statLatchRawValue = FALSE all the time) 
	            #statWebThickness := ABS(#statRawDiameter - #diameter) / 2.0 / ABS(#diamConfig.#diameterOutputRate); // [ LU ] calculated WebThickness
	        END_IF;
	        
	        // diameter hold:
	        #instTrigHold(CLK := #statDiamIsHold);
	        #statSetDiameterValue := #instTrigHold.Q;
	        
	        IF (#instTrigHold.Q OR (#instRTrigBusy.Q AND #statDiamIsHold)) THEN
	            #statDiameterSetValLimited := #diameter;
	            #statRawDiameter := #diameter;
	            #diameter := #diameter;
	            #statTargetDia := #diameter;
	            #statTargetDiaLast := #diameter;
	        END_IF;
	        
	        // latch calculated diameter:
	        IF (#statLatchNow OR #statUseDactRawValue) THEN
	            #statTemp1 := #statRawDiameter;   // [ LU ] Latch now calulated Value
	        ELSE
	            #statTemp1 := #diameter;            // [ LU ] Latch old Dia Value
	        END_IF;
	    END_REGION
	    IF NOT #statUseDactRawValue THEN
	        REGION Set diameter
	            IF (#statSetDiameter) THEN                                                       // Set diameter value
	                #diameter := ABS(#statDiameterSetValLimited);
	                #diameter := #diameter;                               // [ LU ] Set actual Value
	                #statTargetDia := #diameter;
	                #statTargetDiaLast := #diameter;
	            END_IF;
	        END_REGION
	        REGION Interpolate diameter
	            IF (#statLatchNow) THEN
	                #statTargetDiaLast := #statTargetDia;
	                #statTargetDia := #statTemp1;
	            ELSIF #statDiamModeChanged THEN
	                #statTargetDiaLast := #statDiameterInterpolated;//#diameter;
	                #statTargetDia := #statDiameterInterpolated;//#diameter;
	            ELSE                                                                    // DiameterInterpolation1, (DiameterInterpolation3 AND NOT LatchNow)
	                ;
	            END_IF;
	            IF #statResetIntegrators THEN
	                #statTemp1 := #statTargetDiaLast;
	            ELSE
	                #statTemp1 := "LConSMC_Linear"(x := SEL(G := #statDiamModeInUse = "LCON_DIAM_CALC_MODE_INTEGRAL",
	                                                                                       IN1 := ABS(#instShaftInt.y) / 2.0 / #Pi,
	                                                                                       IN0 := ABS(#statDeltaShaft) / #diamConfig.#windingShaftFeedbackScal / 2.0 / #Pi),
	                                               x1 := 0.0,
	                                               y1 := #statTargetDiaLast,
	                                               x2 := #diamConfig.#diameterOutputRate,
	                                               y2 := #statTargetDia);
	            END_IF;
	            IF (#setDiameter) OR (#statSetDiameterValue) THEN
	                #statTemp1 := #statDiameterSetValLimited;
	            END_IF;
	        END_REGION
	    END_IF;
	    #statDiameterInterpolated := #statTemp1;
	    
	    #instDiameterPT1(set := #statSetDiameter,              //PT1 set controlled by mysetDiameter
	                     x := #statDiameterInterpolated,
	                     setvalue := #statDiameterSetValLimited,
	                     smoothingTime := #diamConfig.#diameterFilterTime,
	                     tCycle := #tCycle,
	                     error => #statErrorDiameterPT1,
	                     errorID => #statErrorIDDiameterPT1);
	    #diameter := LIMIT(MN := #diamConfig.#minDia,                      // [ LU ]
	                       IN := #instDiameterPT1.y,                       // [ LU ]
	                       MX := #diamConfig.#maxDia);
	    // Diameter has reached the limit (*c_00040*)
	    #atMinDia := (#instDiameterPT1.y <= #diamConfig.#minDia);
	    #atMaxDia := (#instDiameterPT1.y >= #diamConfig.#maxDia);
	    #diamIsHold := #statDiamIsHold;
	END_IF;
	
	REGION Set outputs
	    #calculatedWebThickness := #statWebThickness;
	    #diamModeInUse := #statDiamModeInUse;
	    #busy := #statBusy;
	    #statError := #statErrorLinePT1 OR #statErrorShaftPT1 OR #statErrorDiameterPT1 OR #statErrorShaftInt OR #statErrorLineInt;
	    IF #statErrorLinePT1 THEN
	        #errorID := #statErrorIDLinePT1;
	    ELSIF #statErrorShaftPT1 THEN
	        #errorID := #statErrorIDShaftPT1;
	    ELSIF #statErrorDiameterPT1 THEN
	        #errorID := #statErrorIDDiameterPT1;
	    ELSIF #statErrorShaftInt THEN
	        #errorID := #statErrorIDShaftInt;
	    ELSIF #statErrorLineInt THEN
	        #errorID := #statErrorIDLineInt;
	    END_IF;
	END_REGION
END_FUNCTION_BLOCK

