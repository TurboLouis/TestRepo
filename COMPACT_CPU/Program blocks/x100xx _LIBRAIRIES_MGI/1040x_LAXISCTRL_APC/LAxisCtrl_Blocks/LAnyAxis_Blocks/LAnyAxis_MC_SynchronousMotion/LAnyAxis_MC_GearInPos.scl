FUNCTION_BLOCK "LAnyAxis_MC_GearInPos"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'tech.team.motioncontrol@siemens.com'
FAMILY : AnyAxis
VERSION : 1.0
   VAR_INPUT 
      Master : DB_ANY;
      Slave : DB_ANY;
      Execute : Bool;
      RatioNumerator : DInt := 1;
      RatioDenominator : DInt := 1;
      MasterSyncPosition : LReal;
      SlaveSyncPosition : LReal;
      SyncProfileReference : DInt := 1;
      MasterStartDistance : LReal := 1.0;
      Velocity : LReal := -1.0;
      Acceleration : LReal := -1.0;
      Deceleration : LReal := -1.0;
      Jerk : LReal := -1.0;
      SyncDirection : DInt := 3;
   END_VAR

   VAR_OUTPUT 
      StartSync { ExternalWritable := 'False'} : Bool := FALSE;
      InSync { ExternalWritable := 'False'} : Bool := FALSE;
      Busy { ExternalWritable := 'False'} : Bool := FALSE;
      CommandAborted { ExternalWritable := 'False'} : Bool := FALSE;
      Error { ExternalWritable := 'False'} : Bool := FALSE;
      ErrorId { ExternalWritable := 'False'} : Word := 16#0000;
   END_VAR

   VAR 
      instMC {InstructionName := 'MC_GEARINPOS'; LibVersion := '5.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : MC_GEARINPOS;
      statExecuteOld { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;
      statAxis { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DB_ANY;
      statAxisType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statMaster { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DB_ANY;
      statMasterType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
   END_VAR

   VAR CONSTANT 
      ERROR_INVALID_TECHNOLOGY_OBJECT : Word := 16#8002;
      IDLE : Int := 0;
      INVALID_AXIS : Int := -1;
      INVALID_MASTER : Int := -2;
      EXTERNAL_ENCODER : Int := 1;
      POSITIONING_AXIS : Int := 3;
      SYNCHRONOUS_AXIS : Int := 4;
      PROXY : Int := 5;
   END_VAR


BEGIN
	REGION HEADER
	  //================================================================================
	  // SIEMENS AG
	  // (c)Copyright 2020 All Rights Reserved
	  //--------------------------------------------------------------------------------
	  // Library: LAnyAxis 
	  // Tested with: S7-1515T-2 PN
	  // Engineering: TIA Portal V16
	  // Restrictions: -
	  // Requirements: S7-1500T FW 2.8.1
	  // Functionality: Conversion DB_ANY --> TO_Axis
	  // Support: tech.team.motioncontrol@siemens.com
	  // Note: Parameter comments are only available in language 'English (United States)'
	  //--------------------------------------------------------------------------------
	  // Change log table:
	  // Version  Date        Expert in charge  Changes applied
	  // 01.00.00 10.03.2020  RS                First released version
	  //================================================================================
	END_REGION
	
	REGION EXECUTE
	  IF #Execute AND NOT #statExecuteOld THEN
	    // Copy parameter
	    #instMC.RatioNumerator := #RatioNumerator;
	    #instMC.RatioDenominator := #RatioDenominator;
	    #instMC.MasterSyncPosition := #MasterSyncPosition;
	    #instMC.SlaveSyncPosition := #SlaveSyncPosition;
	    #instMC.SyncProfileReference := #SyncProfileReference;
	    #instMC.MasterStartDistance := #MasterStartDistance;
	    #instMC.Velocity := #Velocity;
	    #instMC.Acceleration := #Acceleration;
	    #instMC.Deceleration := #Deceleration;
	    #instMC.Jerk := #Jerk;
	    #instMC.SyncDirection := #SyncDirection;
	    
	    // Check axis type
	    CASE TypeOfDB(#Slave) OF
	      TO_SYNCHRONOUSAXIS:
	        #statAxisType := #SYNCHRONOUS_AXIS;
	        #statAxis := #Slave;
	        
	        // Check master type
	        CASE TypeOfDB(#Master) OF
	          TO_POSITIONINGAXIS:
	            #statMasterType := #POSITIONING_AXIS;
	            #statMaster := #Master;
	            
	          TO_SYNCHRONOUSAXIS:
	            #statMasterType := #SYNCHRONOUS_AXIS;
	            #statMaster := #Master;
	            
	          TO_EXTERNALENCODER:
	            #statMasterType := #EXTERNAL_ENCODER;
	            #statMaster := #Master;
	            
	          TO_LEADINGAXISPROXY:
	            #statMasterType := #PROXY;
	            #statMaster := #Master;
	          ELSE
	            #statMasterType := #INVALID_AXIS;
	            #statMaster := 0;
	            
	            // Invalid master
	            #statAxisType := #INVALID_MASTER;
	        END_CASE;
	        
	      ELSE
	        #statAxisType := #INVALID_AXIS;
	        #statAxis := 0;
	    END_CASE;
	    
	  ELSIF NOT #Execute AND (#statAxisType < #IDLE) THEN
	    #statAxisType := #IDLE;
	    
	    // Outputs
	    #StartSync := FALSE;
	    #InSync := FALSE;
	    #Busy := FALSE;
	    #CommandAborted := FALSE;
	    #Error := FALSE;
	    #ErrorId := 16#0000;
	  END_IF;
	  
	  // Edge detection
	  #statExecuteOld := #Execute;
	END_REGION
	
	CASE #statAxisType OF
	  #IDLE:
	    ;
	    
	  #SYNCHRONOUS_AXIS:
	    REGION VALID_AXIS
	      // Inputs
	      #instMC.Execute := #Execute;
	      
	      // Call of MC instruction
	      CASE #statMasterType OF
	        #POSITIONING_AXIS:
	          "LAnyAxis_UnpubGearInPosMasterPosAxis"(slave := #statAxis,
	                                                 master := #statMaster,
	                                                 instMC := #instMC);
	        #SYNCHRONOUS_AXIS:
	          "LAnyAxis_UnpubGearInPosMasterSyncAxis"(slave := #statAxis,
	                                                  master := #statMaster,
	                                                  instMC := #instMC);
	        #EXTERNAL_ENCODER:
	          "LAnyAxis_UnpubGearInPosMasterExtEncoder"(slave := #statAxis,
	                                                    master := #statMaster,
	                                                    instMC := #instMC);
	        #PROXY:
	          "LAnyAxis_UnpubGearInPosMasterProxy"(slave := #statAxis,
	                                               master := #statMaster,
	                                               instMC := #instMC);
	      END_CASE;
	      
	      // Outputs
	      #StartSync := #instMC.StartSync;
	      #InSync := #instMC.InSync;
	      #Busy := #instMC.Busy;
	      #CommandAborted := #instMC.CommandAborted;
	      #Error := #instMC.Error;
	      #ErrorId := #instMC.ErrorId;
	      
	      // Status of MC instruction
	      IF NOT #instMC.Busy
	        AND NOT #instMC.CommandAborted
	        AND NOT #instMC.Error
	      THEN
	        // Not active
	        #statAxisType := #IDLE;
	      END_IF;
	    END_REGION
	    
	  ELSE
	    REGION INVALID_TECHNOLOGY_OBJECT
	      // Outputs
	      #StartSync := FALSE;
	      #InSync := FALSE;
	      #Busy := FALSE;
	      #CommandAborted := FALSE;
	      #Error := TRUE;
	      #ErrorId := #ERROR_INVALID_TECHNOLOGY_OBJECT;
	    END_REGION
	END_CASE;
END_FUNCTION_BLOCK

