FUNCTION_BLOCK "LConSMC_DT1"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      set : Bool := FALSE;
      x : LReal := 0.0;
      setValue : LReal := 0.0;
      smoothingTime : LReal := 0.0;
      diffTime : LReal := 0.0;
      tCycle : Real;
   END_VAR

   VAR_OUTPUT 
      error : Bool;
      errorID : DWord := 16#0000_0000;
      y : LReal;
      ypt : LReal;
   END_VAR

   VAR 
      statT1s : LReal;
      statXkm1 : LReal;
      statYkm1 : LReal;
      statYPTkm1 : LReal;
      statXFactor : LReal;
      statYFactor : LReal;
      statDenom : LReal;
      statEnum : LReal;
      statTDs : LReal;
      statFirstRun : Bool := TRUE;
      statError : Bool := FALSE;
      statY : LReal := 0.0;
      statYpt : LReal := 0.0;
   END_VAR

   VAR CONSTANT 
      UNIT_ID : DWord := 16#1104_0000;
      MAX_SMOOTHING : Real := 5000.0;
      MAX_DIFF_TIME : Real := 1000.0;
      NO_ERROR : DWord := 16#0000_0000;
   END_VAR


BEGIN
	//------------------------------------------------------------------------------------------------------------------------
	//SIEMENS DF FA PMA APC / Mumbai,India | Erlangen, Germany
	//------------------------------------------------------------------------------------------------------------------------
	//name          : DT1
	//functionality : DT1 Filter
	//assignment    : OB3x (cyclic interupt), OB6x (synchronous operation)
	//library       : LCon
	//------------------------------------------------------------------------------------------------------------------------
	//change log table:
	//version   date          expert in charge              changes applied
	//V1.0      34.07.2012    APC GMC group                 Creation
	//V1.1      17.11.2016    APC ERL                       adapted to styleguide; warning "variable might not be initialized" removed
	//========================================================================================================================
	
	IF (#statFirstRun) THEN// only at the first Run      
	    #statFirstRun := FALSE;
	    #statXkm1 := 0.0;
	END_IF;
	#statError := #statError OR (#tCycle = 0.0);                                           // Cycle time identified as zero
	
	IF (#statError) THEN
	    #errorID := #UNIT_ID OR "LCON_ERROR_CYCLE_TIME_ZERO";                                       // FB NOT running IN cyclic task (81)
	ELSE
	    #errorID := #NO_ERROR;
	END_IF;
	
	IF (NOT #statError) THEN                                                         // execute code if below error priority 1
	    #statT1s := LIMIT(MN := #tCycle,
	                      IN := #smoothingTime,
	                      MX := #MAX_SMOOTHING);                                        // Check for T being not smaller than cycle time. Set it to cycle time otherwise.
	    #statTDs := LIMIT(MN := #tCycle,                                                      // Ensure TD being not negative
	                      IN := #diffTime,                                                  // Check for active set-Cmd and (TD<>0): set y , Xeknm1 to SV
	                      MX := #MAX_DIFF_TIME);                                            // and compute ypt
	    
	    IF (#set) THEN                                                           // set is active
	        IF (#statTDs > 0.0) THEN                                                 // change values only if TD > 0
	            #statY := #setValue;
	            #statYpt := #x - #setValue * #statT1s / #statTDs;
	            #statXkm1 := #setValue;
	        END_IF;
	    ELSE                                                                    // Implement algorithm: dt1, trapezoid integration ("Tustin")
	        #statDenom := 2.0 * #statT1s;                                              // plus algorythm: pt1, trapezoid integration ("Tustin")
	        #statEnum := #statDenom - #tCycle;                                           // 2T1 - Ta
	        #statDenom := #statDenom + #tCycle;                                           // 2T1 + Ta
	        #statXFactor := 2.0 * #statTDs / #statDenom;                                      // 2TD/(2T1+Ta)
	        #statYFactor := #statEnum / #statDenom;                                           // (2T1-Ta)/(2T1+Ta)
	        #statY := #statYFactor * #statYkm1 + #statXFactor * (#x - #statXkm1);              //Integrating values over time
	        #statYpt := #statYFactor * #statYPTkm1 + #tCycle / #statDenom * (#x + #statXkm1);
	        #statXkm1 := #x;
	    END_IF;
	    #statYkm1 := #statY;
	    #statYPTkm1 := #statYpt;
	ELSE
	    #statY := 0.0;
	    #statYpt := 0.0;
	END_IF;
	
	// set outputs
	#error := #statError;
	#y := #statY;
	#ypt := #statYpt;
	
END_FUNCTION_BLOCK

