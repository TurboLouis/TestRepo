FUNCTION_BLOCK "LConSMC_AverageValue"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      enable : Bool := FALSE;
      x : LReal := 0.0;
      sizeOfArray : Int := 20;
      reset : Bool := FALSE;
   END_VAR

   VAR_OUTPUT 
      busy : Bool := FALSE;
      error : Bool := FALSE;
      errorID : DWord := 16#0000_0000;
      averageValue : LReal := 0.0;
      maxValuereached : Bool := FALSE;
   END_VAR

   VAR 
      statMaxValueReached : Bool;
      instTrigEn : "LConSMC_TRIG";
      statAverageArray : "LConSMC_typeBreakPointTable" := ([20(0.0)]);
      statArrayCounter : Int;
      statLimitedSize : Int;
      statMaxValue : Int;
      statTotalValue : LReal;
   END_VAR

   VAR CONSTANT 
      UNIT_ID : DWord := 16#0105_0000;
      MAX_LENGTH_AVERAGE_VALUE : Int := 20;
      NO_ERROR : DWord := 16#0000_0000;
   END_VAR


BEGIN
	//------------------------------------------------------------------------------------------------------------------------
	//SIEMENS DF FA PMA APC / Mumbai,India | Erlangen, Germany
	//------------------------------------------------------------------------------------------------------------------------
	//name          : AverageValue
	//functionality : Floating avarage value calculation
	//assignment    : OB3x (cyclic interupt), OB6x (synchronous operation)
	//library       : LCon
	//------------------------------------------------------------------------------------------------------------------------
	//change log table:
	//version   date            expert in charge                changes applied
	//V1.0      03.07.2012      APC GMC group                   Creation
	//V1.1      17.11.2016      APC ERL                         adapted to styleguide
	//V1.1.1    28.01.2021      APC Erlangen                    Removed warning "Parameter might not be initialized"
	//========================================================================================================================
	
	#instTrigEn(CLK := #enable);
	
	IF #enable THEN
	    IF #reset OR #instTrigEn.QR THEN                                            //Reset values on reset command or on rising trigger pulse
	        #statLimitedSize := LIMIT(MN := 1,
	                                  IN := #sizeOfArray,
	                                  MX := #MAX_LENGTH_AVERAGE_VALUE);
	        #error := FALSE;
	        #errorID := #NO_ERROR;
	        #statArrayCounter := 0;
	        #statMaxValueReached := False;
	        #statTotalValue := 0.0;
	    END_IF;
	    
	    //ERRORS
	    IF #sizeOfArray > #MAX_LENGTH_AVERAGE_VALUE
	        OR #sizeOfArray < 2
	    THEN
	        #error := true;
	        #errorID := #UNIT_ID OR "LCON_ERROR_INVALID_CONFIGURATION";
	        RETURN;
	    END_IF;
	    
	    IF (#statArrayCounter > (#statLimitedSize - 1)) THEN                 // Fill Array with Input Value
	        #statArrayCounter := 0;                                      // Begin at Zero
	        #statMaxValueReached := TRUE;
	    END_IF;
	    
	    IF (#statMaxValueReached) THEN
	        #statTotalValue := #statTotalValue - #statAverageArray.values[#statArrayCounter];
	    END_IF;
	    
	    #statAverageArray.values[#statArrayCounter] := #x;                              // Write new Value in ARRAY
	    #statArrayCounter := #statArrayCounter + 1;                                      // Set counter up
	    IF (#statMaxValueReached) THEN                                           // Choose max index
	        #statMaxValue := #statLimitedSize;
	    ELSE
	        #statMaxValue := #statArrayCounter;
	    END_IF;
	    
	    #statTotalValue := #statTotalValue + #statAverageArray.values[#statArrayCounter - 1];       //(arrayCounter-1)----->present value
	    #averageValue := #statTotalValue / #statMaxValue;                                // Calc Average
	    
	    #maxValuereached := #statMaxValueReached;
	END_IF;
	
	
	
END_FUNCTION_BLOCK

