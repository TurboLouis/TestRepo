FUNCTION_BLOCK "LAnyAxis_MC_SynchronizedMotionSimulation"
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : 'tech.team.motioncontrol@siemens.com'
FAMILY : AnyAxis
VERSION : 1.0
   VAR_INPUT 
      slave : DB_ANY;
      Enable : Bool;
   END_VAR

   VAR_OUTPUT 
      InSimulation { ExternalWritable := 'False'} : Bool;
      Busy { ExternalWritable := 'False'} : Bool;
      Error { ExternalWritable := 'False'} : Bool;
      ErrorId { ExternalWritable := 'False'} : Word;
   END_VAR

   VAR 
      instMC {InstructionName := 'MC_SYNCHRONIZEDMOTIONSIMULATION'; LibVersion := '5.0'; ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'; S7_SetPoint := 'False'} : MC_SYNCHRONIZEDMOTIONSIMULATION;
      statAxis { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : DB_ANY;
      statAxisType { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
   END_VAR

   VAR CONSTANT 
      ERROR_INVALID_TECHNOLOGY_OBJECT : Word := 16#8002;
      IDLE : Int := 0;
      INVALID_AXIS : Int := -1;
      SYNCHRONOUS_AXIS : Int := 4;
   END_VAR


BEGIN
	REGION HEADER
	  //================================================================================
	  // SIEMENS AG
	  // (c)Copyright 2020 All Rights Reserved
	  //--------------------------------------------------------------------------------
	  // Library: LAnyAxis 
	  // Tested with: S7-1515T-2 PN
	  // Engineering: TIA Portal V16
	  // Restrictions: -
	  // Requirements: S7-1500T FW 2.8.1
	  // Functionality: Conversion DB_ANY --> TO_Axis
	  // Support: tech.team.motioncontrol@siemens.com
	  // Note: Parameter comments are only available in language 'English (United States)'
	  //--------------------------------------------------------------------------------
	  // Change log table:
	  // Version  Date        Expert in charge  Changes applied
	  // 01.00.00 10.03.2020  RS                First released version
	  //================================================================================
	END_REGION
	
	REGION ENABLE
	  IF (#statAxisType = #IDLE) AND #Enable THEN
	    // check axis type
	    CASE TypeOfDB(#slave) OF
	      TO_SYNCHRONOUSAXIS:
	        #statAxisType := #SYNCHRONOUS_AXIS;
	        #statAxis := #slave;
	      ELSE
	        #statAxisType := #INVALID_AXIS;
	        #statAxis := 0;
	    END_CASE;
	    
	  ELSIF NOT #Enable AND (#statAxisType = #INVALID_AXIS) THEN
	    #statAxisType := #IDLE;
	    
	    // Outputs
	    #InSimulation := FALSE;
	    #Busy := FALSE;
	    #Error := FALSE;
	    #ErrorId := 16#0000;
	  END_IF;
	END_REGION
	
	CASE #statAxisType OF
	  #IDLE:
	    ;
	    
	  #SYNCHRONOUS_AXIS:
	    REGION SYNCHRONOUS_AXIS
	      // Inputs
	      #instMC.Enable := #Enable;
	      
	      // Call of MC instruction
	      #instMC(Slave := #statAxis);
	      
	      // Outputs
	      #InSimulation := #instMC.InSimulation;
	      #Busy := #instMC.Busy;
	      #Error := #instMC.Error;
	      #ErrorId := #instMC.ErrorId;
	      
	      // Status of MC instruction
	      IF NOT #instMC.Busy
	        AND NOT #instMC.Error
	      THEN
	        // Not active
	        #statAxisType := #IDLE;
	      END_IF;
	    END_REGION
	    
	  ELSE
	    REGION INVALID_AXIS
	      // Outputs
	      #InSimulation := FALSE;
	      #Busy := FALSE;
	      #Error := TRUE;
	      #ErrorId := #ERROR_INVALID_TECHNOLOGY_OBJECT;
	    END_REGION
	END_CASE;
END_FUNCTION_BLOCK

